apiVersion: v1
kind: Namespace
metadata:
  name: matr
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/enforce-version: latest
    pod-security.kubernetes.io.warn: baseline
    pod-security.kubernetes.io.audit: baseline
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: matrapp-sa
  namespace: matr
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: matr
  name: matrapp-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["matr-db-secret"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: matrapp-rolebinding
  namespace: matr
subjects:
  - kind: ServiceAccount
    name: matrapp-sa
    namespace: matr
roleRef:
  kind: Role
  name: matrapp-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: matr-db-secret
  namespace: matr
type: Opaque
stringData:
  POSTGRES_USER: matruser
  POSTGRES_PASSWORD: matrpassword
  POSTGRES_DB: matrdb
---
apiVersion: v1
kind: Service
metadata:
  name: matrapp
  namespace: matr
spec:
  selector:
    app: matrapp
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: matr
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app: postgres

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standardmatr
provisioner: disk.csi.azure.com
parameters:
  skuName: Standard_LRS
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: matr
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standardmatr
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: matr
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: postgres
        image: postgres:16.4
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: ["ALL"]
        ports:
          - containerPort: 5432
        env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: matr-db-secret
                key: POSTGRES_USER
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: matr-db-secret
                key: POSTGRES_PASSWORD
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                name: matr-db-secret
                key: POSTGRES_DB
          - name: PGDATA
            value: /var/lib/postgresql/data2/pgdata
        volumeMounts:
          - name: postgres-data
            mountPath: /var/lib/postgresql/data2
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standardmatr
        resources:
          requests:
            storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: matrapp
  namespace: matr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: matrapp
  template:
    metadata:
      labels:
        app: matrapp
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: matrapp-sa
      initContainers:
        - name: wait-for-postgres
          image: alpine:3.18
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            seccompProfile:
              type: RuntimeDefault
          command:
            - sh
            - -c
            - |
              apk add --no-cache busybox-extras
              until nc -zv postgres 5432; do
                echo "Waiting for Postgres..."
                sleep 2
              done
      containers:
      - name: matrapp
        image: maniek3772/matr-flask-app:1.0.2
        securityContext:
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: [ "ALL" ]
          readOnlyRootFilesystem: true
        ports:
          - containerPort: 5000
        env:
          - name: DB_HOST
            value: postgres
          - name: DB_PORT
            value: "5432"
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: matr-db-secret
                key: POSTGRES_DB
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: matr-db-secret
                key: POSTGRES_USER
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: matr-db-secret
                key: POSTGRES_PASSWORD
          - name: APP_PORT
            value: "5000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
  namespace: matr
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-access
  namespace: matr
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: matrapp
      ports:
        - protocol: TCP
          port: 5432
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: matrapp-egress
  namespace: matr
spec:
  podSelector:
    matchLabels:
      app: matrapp
  policyTypes:
    - Egress
  egress:
    - {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: matrapp
  namespace: matr
spec:
  ingressClassName: nginx
  rules:
    - host: matrapp.20.253.205.154.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: matrapp
                port:
                  number: 5000
  tls:
    - hosts:
        - matrapp.20.253.205.154.nip.io
      secretName: matrapp-tls
